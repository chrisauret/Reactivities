[{"C:\\source\\Reactivities\\client-app\\src\\index.tsx":"1","C:\\source\\Reactivities\\client-app\\src\\reportWebVitals.ts":"2","C:\\source\\Reactivities\\client-app\\src\\app\\layout\\App.tsx":"3","C:\\source\\Reactivities\\client-app\\src\\features\\navbar.tsx":"4","C:\\source\\Reactivities\\client-app\\src\\features\\activities\\dashboard\\ActivityDashboard.tsx":"5","C:\\source\\Reactivities\\client-app\\src\\features\\activities\\dashboard\\ActivityList.tsx":"6","C:\\source\\Reactivities\\client-app\\src\\features\\activities\\details\\ActivityDetails.tsx":"7","C:\\source\\Reactivities\\client-app\\src\\features\\activities\\form\\ActivityForm.tsx":"8","C:\\source\\Reactivities\\client-app\\src\\app\\api\\agent.ts":"9","C:\\source\\Reactivities\\client-app\\src\\app\\layout\\LoadingComponent.tsx":"10","C:\\source\\Reactivities\\client-app\\src\\app\\stores\\activityStore.ts":"11"},{"size":523,"mtime":1608160476576,"results":"12","hashOfConfig":"13"},{"size":425,"mtime":499162500000,"results":"14","hashOfConfig":"13"},{"size":3327,"mtime":1608544440692,"results":"15","hashOfConfig":"13"},{"size":846,"mtime":1608326198686,"results":"16","hashOfConfig":"13"},{"size":2368,"mtime":1608423883280,"results":"17","hashOfConfig":"13"},{"size":2215,"mtime":1608423966524,"results":"18","hashOfConfig":"13"},{"size":1277,"mtime":1608382506947,"results":"19","hashOfConfig":"13"},{"size":2632,"mtime":1608424068028,"results":"20","hashOfConfig":"13"},{"size":1228,"mtime":1608421457311,"results":"21","hashOfConfig":"13"},{"size":344,"mtime":1608422584441,"results":"22","hashOfConfig":"13"},{"size":200,"mtime":1608544094736,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"bpf4sv",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"26"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"26"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"26"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\source\\Reactivities\\client-app\\src\\index.tsx",[],["50","51"],"C:\\source\\Reactivities\\client-app\\src\\reportWebVitals.ts",[],"C:\\source\\Reactivities\\client-app\\src\\app\\layout\\App.tsx",[],"C:\\source\\Reactivities\\client-app\\src\\features\\navbar.tsx",[],"C:\\source\\Reactivities\\client-app\\src\\features\\activities\\dashboard\\ActivityDashboard.tsx",["52","53"],"import React, { SyntheticEvent } from 'react'\r\nimport { Grid } from 'semantic-ui-react'\r\nimport { IActivity } from '../../../models/activity'\r\nimport { ActivityDetails } from '../details/ActivityDetails'\r\nimport { ActivityForm } from '../form/ActivityForm'\r\nimport { ActivityList } from './ActivityList'\r\n\r\ninterface IProps {\r\n    activities: IActivity[];\r\n    selectActivity: (id: string) => void;\r\n    selectedActivity: IActivity | null;\r\n    editMode: boolean;\r\n    setEditMode: (editMode: boolean) => void;\r\n    setSelectedActivity: (activity: IActivity | null) => void;\r\n    createActivity: (activity: IActivity) => void;\r\n    editActivity: (activity: IActivity) => void;\r\n    deleteActivity: (e: SyntheticEvent<HTMLButtonElement>, id: string) => void;\r\n    submitting: boolean;\r\n    target: string\r\n}\r\n\r\nexport const ActivityDashboard: React.FC<IProps> = (\r\n    {\r\n        activities,\r\n        selectActivity,\r\n        selectedActivity,\r\n        editMode,\r\n        setEditMode,\r\n        setSelectedActivity,\r\n        createActivity,\r\n        editActivity,\r\n        deleteActivity,\r\n        submitting,\r\n        target\r\n    }) => {\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={10}>\r\n                <ActivityList\r\n                    activities={activities}\r\n                    selectActivity={selectActivity}\r\n                    deleteActivity={deleteActivity}\r\n                    submitting={submitting}\r\n                    target={target}\r\n                />\r\n            </Grid.Column>\r\n            <Grid.Column width={6}>\r\n                {selectedActivity && !editMode && (\r\n                    <ActivityDetails\r\n                        activity={selectedActivity}\r\n                        setEditMode={setEditMode}\r\n                        setSelectedActivity={setSelectedActivity}\r\n                    />\r\n                )}\r\n                {editMode && (\r\n                    <ActivityForm\r\n                        key={selectedActivity && selectedActivity.id || 0}\r\n                        setEditMode={setEditMode}\r\n                        activity={selectedActivity!}\r\n                        createActivity={createActivity}\r\n                        editActivity={editActivity}\r\n                        submitting={submitting}\r\n                    />\r\n                )}\r\n            </Grid.Column>\r\n        </Grid >\r\n    );\r\n};","C:\\source\\Reactivities\\client-app\\src\\features\\activities\\dashboard\\ActivityList.tsx",[],"C:\\source\\Reactivities\\client-app\\src\\features\\activities\\details\\ActivityDetails.tsx",[],"C:\\source\\Reactivities\\client-app\\src\\features\\activities\\form\\ActivityForm.tsx",["54"],"import React, { FormEvent, useState } from 'react'\r\nimport { Segment, Form, Input, Button } from 'semantic-ui-react'\r\nimport { IActivity } from '../../../models/activity'\r\nimport { v4 as uuid } from 'uuid'\r\n\r\ninterface IProps {\r\n    setEditMode: (editMode: boolean) => void;\r\n    activity: IActivity;\r\n    createActivity: (activity: IActivity) => void;\r\n    editActivity: (activity: IActivity) => void;\r\n    submitting: boolean;\r\n}\r\n\r\nexport const ActivityForm: React.FC<IProps> = ({\r\n    setEditMode,\r\n    activity: initialFormState,\r\n    createActivity,\r\n    editActivity,\r\n    submitting\r\n}) => {\r\n\r\n    const initializeForm = () => {\r\n        if (initialFormState) {\r\n            return initialFormState;\r\n        }\r\n\r\n        return {\r\n            id: '',\r\n            title: '',\r\n            category: '',\r\n            description: '',\r\n            date: '',\r\n            city: '',\r\n            venue: ''\r\n        };\r\n    }\r\n\r\n    const [activity, setActivity] = useState<IActivity>(initializeForm);\r\n\r\n    const handleSubmit = () => {\r\n\r\n        if (activity.id.length === 0) {\r\n            let newActivity = {\r\n                ...activity,\r\n                id: uuid()\r\n            }\r\n            createActivity(newActivity);\r\n        } else {\r\n            editActivity(activity);\r\n        }\r\n    }\r\n\r\n    const handleInputChange = (event: FormEvent<HTMLInputElement | HTMLTextAreaElement>) => {\r\n        const { name, value } = event.currentTarget;\r\n        setActivity({ ...activity, [name]: value });\r\n    }\r\n\r\n    return (\r\n        <Segment clearing>\r\n            <Form onSubmit={handleSubmit}>\r\n                <Form.Input onChange={handleInputChange} name='title' placeholder='Title' value={activity.title} />\r\n                <Form.TextArea onChange={handleInputChange} rows={2} name='description' placeholder='Description' value={activity.description} />\r\n                <Form.Input onChange={handleInputChange} name='category' placeholder='Category' value={activity.category} />\r\n                <Form.Input onChange={handleInputChange} type={'datetime-local'} name='date' placeholder='Date' value={activity.date} />\r\n                <Form.Input onChange={handleInputChange} name='city' placeholder='City' value={activity.city} />\r\n                <Form.Input onChange={handleInputChange} name='venue' placeholder='Venue' value={activity.venue} />\r\n                <Button loading={submitting} floated='right' positive type='submit' content='Submit' />\r\n                <Button floated='right' type='button' content='Cancel' onClick={() => setEditMode(false)} />\r\n            </Form>\r\n        </Segment>\r\n    )\r\n}\r\n","C:\\source\\Reactivities\\client-app\\src\\app\\api\\agent.ts",["55"],"import axios, { AxiosResponse } from 'axios'\r\nimport { IActivity } from '../../models/activity';\r\n\r\naxios.defaults.baseURL = 'https://localhost:5001/api';\r\n\r\nconst responseBody = (response: AxiosResponse) => response.data;\r\n\r\nconst sleep = (ms: number) => (response: AxiosResponse) =>\r\n    new Promise<AxiosResponse>(resolve => setTimeout(() => resolve(response), ms));\r\n\r\nconst requests = {\r\n    get: (url: string) => axios.get(url).then(sleep(800)).then(responseBody),\r\n    post: (url: string, body: {}) => axios.post(url, body).then(sleep(800)).then(responseBody),\r\n    put: (url: string, body: {}) => axios.put(url, body).then(sleep(800)).then(responseBody),\r\n    del: (url: string) => axios.delete(url).then(sleep(800)).then(responseBody)\r\n}\r\n\r\nconst Activities = {\r\n    //list: () => requests.get('/activities'),\r\n    list: (): Promise<IActivity[]> => requests.get('/activities'),\r\n    details: (id: string) => requests.get(`/activities/${id}`),\r\n    create: (activity: IActivity) => requests.post('/activities', activity),\r\n    update: (activity: IActivity) => requests.put(`/activities/${activity.id}`, activity),\r\n    delete: (id: string) => requests.del(`/activities/${id}`),\r\n};\r\n\r\nexport default {\r\n    Activities\r\n}","C:\\source\\Reactivities\\client-app\\src\\app\\layout\\LoadingComponent.tsx",[],"C:\\source\\Reactivities\\client-app\\src\\app\\stores\\activityStore.ts",[],{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","severity":1,"message":"61","line":57,"column":47,"nodeType":"62","messageId":"63","endLine":57,"endColumn":49},{"ruleId":"60","severity":1,"message":"61","line":57,"column":70,"nodeType":"62","messageId":"63","endLine":57,"endColumn":72},{"ruleId":"64","severity":1,"message":"65","line":2,"column":25,"nodeType":"66","messageId":"67","endLine":2,"endColumn":30},{"ruleId":"68","severity":1,"message":"69","line":27,"column":1,"nodeType":"70","endLine":29,"endColumn":2},"no-native-reassign",["71"],"no-negated-in-lhs",["72"],"no-mixed-operators","Unexpected mix of '&&' and '||'.","LogicalExpression","unexpectedMixedOperator","@typescript-eslint/no-unused-vars","'Input' is defined but never used.","Identifier","unusedVar","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation"]