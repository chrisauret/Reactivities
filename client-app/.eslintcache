[{"C:\\source\\Reactivities\\client-app\\src\\index.tsx":"1","C:\\source\\Reactivities\\client-app\\src\\reportWebVitals.ts":"2","C:\\source\\Reactivities\\client-app\\src\\app\\layout\\App.tsx":"3","C:\\source\\Reactivities\\client-app\\src\\features\\navbar.tsx":"4","C:\\source\\Reactivities\\client-app\\src\\features\\activities\\dashboard\\ActivityDashboard.tsx":"5","C:\\source\\Reactivities\\client-app\\src\\features\\activities\\dashboard\\ActivityList.tsx":"6","C:\\source\\Reactivities\\client-app\\src\\features\\activities\\details\\ActivityDetails.tsx":"7","C:\\source\\Reactivities\\client-app\\src\\features\\activities\\form\\ActivityForm.tsx":"8","C:\\source\\Reactivities\\client-app\\src\\app\\api\\agent.ts":"9","C:\\source\\Reactivities\\client-app\\src\\app\\layout\\LoadingComponent.tsx":"10","C:\\source\\Reactivities\\client-app\\src\\app\\stores\\activityStore.ts":"11","C:\\source\\Reactivities\\client-app\\src\\features\\home\\HomePage.tsx":"12","C:\\source\\Reactivities\\client-app\\src\\app\\layout\\scrollToTop.tsx":"13","C:\\source\\Reactivities\\client-app\\src\\features\\activities\\dashboard\\ActivityListItem.tsx":"14","C:\\source\\Reactivities\\client-app\\src\\features\\activities\\details\\ActivityDetailesHeader.tsx":"15","C:\\source\\Reactivities\\client-app\\src\\features\\activities\\details\\ActivityDetailsChat.tsx":"16","C:\\source\\Reactivities\\client-app\\src\\features\\activities\\details\\ActivityDetailsInfo.tsx":"17","C:\\source\\Reactivities\\client-app\\src\\features\\activities\\details\\ActivityDetailesSidebar.tsx":"18","C:\\source\\Reactivities\\client-app\\src\\app\\layout\\NotFound.tsx":"19","C:\\source\\Reactivities\\client-app\\src\\app\\common\\form\\SelectInput.tsx":"20","C:\\source\\Reactivities\\client-app\\src\\app\\common\\options\\categoryOptions.tsx":"21","C:\\source\\Reactivities\\client-app\\src\\app\\common\\form\\TextAreaInput.tsx":"22","C:\\source\\Reactivities\\client-app\\src\\app\\common\\form\\TextInput.tsx":"23","C:\\source\\Reactivities\\client-app\\src\\app\\common\\form\\DateInput.tsx":"24","C:\\source\\Reactivities\\client-app\\src\\app\\common\\util\\util.ts":"25","C:\\source\\Reactivities\\client-app\\src\\models\\activity.ts":"26","C:\\source\\Reactivities\\client-app\\src\\app\\stores\\rootStore.ts":"27","C:\\source\\Reactivities\\client-app\\src\\app\\stores\\userStore.ts":"28","C:\\source\\Reactivities\\client-app\\src\\features\\user\\LoginForm.tsx":"29"},{"size":1090,"mtime":1612773748979,"results":"30","hashOfConfig":"31"},{"size":425,"mtime":499162500000,"results":"32","hashOfConfig":"31"},{"size":1623,"mtime":1613870961148,"results":"33","hashOfConfig":"31"},{"size":1081,"mtime":1611227680709,"results":"34","hashOfConfig":"31"},{"size":1004,"mtime":1613870044520,"results":"35","hashOfConfig":"31"},{"size":1099,"mtime":1613870102421,"results":"36","hashOfConfig":"31"},{"size":1846,"mtime":1613870191393,"results":"37","hashOfConfig":"31"},{"size":7061,"mtime":1613870323599,"results":"38","hashOfConfig":"31"},{"size":2223,"mtime":1613881343274,"results":"39","hashOfConfig":"31"},{"size":344,"mtime":1608422584441,"results":"40","hashOfConfig":"31"},{"size":5625,"mtime":1613872083313,"results":"41","hashOfConfig":"31"},{"size":763,"mtime":1613870996259,"results":"42","hashOfConfig":"31"},{"size":268,"mtime":1611629199907,"results":"43","hashOfConfig":"31"},{"size":1563,"mtime":1612691741932,"results":"44","hashOfConfig":"31"},{"size":2062,"mtime":1612691745532,"results":"45","hashOfConfig":"31"},{"size":2386,"mtime":1612579096172,"results":"46","hashOfConfig":"31"},{"size":1717,"mtime":1612691753748,"results":"47","hashOfConfig":"31"},{"size":2404,"mtime":1612579402042,"results":"48","hashOfConfig":"31"},{"size":627,"mtime":1612605291126,"results":"49","hashOfConfig":"31"},{"size":887,"mtime":1612663011958,"results":"50","hashOfConfig":"31"},{"size":358,"mtime":1612663103910,"results":"51","hashOfConfig":"31"},{"size":701,"mtime":1612663201904,"results":"52","hashOfConfig":"31"},{"size":698,"mtime":1612663203752,"results":"53","hashOfConfig":"31"},{"size":1077,"mtime":1612781736411,"results":"54","hashOfConfig":"31"},{"size":358,"mtime":1612774670647,"results":"55","hashOfConfig":"31"},{"size":738,"mtime":1612776025310,"results":"56","hashOfConfig":"31"},{"size":500,"mtime":1613872097234,"results":"57","hashOfConfig":"31"},{"size":1048,"mtime":1613882186463,"results":"58","hashOfConfig":"31"},{"size":2125,"mtime":1613882036423,"results":"59","hashOfConfig":"31"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},"bpf4sv",{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"62"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"62"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"62"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"62"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"121","messages":"122","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\source\\Reactivities\\client-app\\src\\index.tsx",[],["123","124"],"C:\\source\\Reactivities\\client-app\\src\\reportWebVitals.ts",[],"C:\\source\\Reactivities\\client-app\\src\\app\\layout\\App.tsx",[],"C:\\source\\Reactivities\\client-app\\src\\features\\navbar.tsx",[],"C:\\source\\Reactivities\\client-app\\src\\features\\activities\\dashboard\\ActivityDashboard.tsx",[],"C:\\source\\Reactivities\\client-app\\src\\features\\activities\\dashboard\\ActivityList.tsx",["125"],"import { observer } from 'mobx-react-lite'\r\nimport React, { Fragment, useContext } from 'react'\r\nimport { Item, Label } from 'semantic-ui-react'\r\nimport ActivityStore from '../../../app/stores/activityStore'\r\nimport { RootStoreContext } from '../../../app/stores/rootStore'\r\nimport { ActivityListItem } from './ActivityListItem'\r\n\r\nconst ActivityList = () => {\r\n\r\n    const rootStore = useContext(RootStoreContext);\r\n    const { activitiesByDate } = rootStore.activityStore;\r\n\r\n    return (\r\n        <Fragment>\r\n            {activitiesByDate.map(([group, activities]) => (\r\n                <Fragment key={group}>\r\n                    <Label size='large' color='blue'>\r\n                        {group}\r\n                    </Label>\r\n                    <Item.Group divided>\r\n                        {activities.map(activity => (\r\n                            <ActivityListItem key={activity.id} activity={activity} />\r\n                        ))}\r\n                    </Item.Group >\r\n                </Fragment>\r\n            ))}\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default observer(ActivityList);","C:\\source\\Reactivities\\client-app\\src\\features\\activities\\details\\ActivityDetails.tsx",["126"],"import React, { useContext, useEffect } from 'react'\r\nimport { Grid } from 'semantic-ui-react'\r\nimport ActivityStore from '../../../app/stores/activityStore'\r\nimport { observer } from 'mobx-react-lite'\r\nimport { RouteComponentProps } from 'react-router-dom'\r\nimport { LoadingComponent } from '../../../app/layout/LoadingComponent'\r\nimport ActivityDetailesHeader from './ActivityDetailesHeader'\r\nimport { ActivityDetailesSidebar } from './ActivityDetailesSidebar'\r\nimport { ActivityDetailsChat } from './ActivityDetailsChat'\r\nimport { ActivityDetailsInfo } from './ActivityDetailsInfo'\r\nimport { RootStoreContext } from '../../../app/stores/rootStore'\r\n\r\n\r\ninterface DatailParams {\r\n    id: string\r\n}\r\n\r\nconst ActivityDetails: React.FC<RouteComponentProps<DatailParams>> = ({ match, history }) => {\r\n\r\n    const rootStore = useContext(RootStoreContext);\r\n    const { activity, loadActivity, loadingInitial } = rootStore.activityStore;\r\n\r\n    useEffect(() => {\r\n        loadActivity(match.params.id);\r\n    }, [loadActivity, match.params.id, history]);\r\n    // If you leave this off -',[loadActivity][,..]', then it will run every time the component re-renders. Which is not what I want. I only want it to run once when the componentn mounts.\r\n\r\n    if (loadingInitial)\r\n        return <LoadingComponent content='Loading activity...' />\r\n\r\n    if (!activity)\r\n        return <h2>Activity  not found</h2>\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={10}>\r\n                <ActivityDetailesHeader activity={activity} />\r\n                <ActivityDetailsInfo activity={activity} />\r\n                <ActivityDetailsChat />\r\n            </Grid.Column>\r\n            <Grid.Column width={6}>\r\n                <ActivityDetailesSidebar />\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default observer(ActivityDetails);","C:\\source\\Reactivities\\client-app\\src\\features\\activities\\form\\ActivityForm.tsx",["127"],"import React, { useContext, useEffect, useState } from 'react'\r\nimport { Segment, Form, Button, Grid } from 'semantic-ui-react'\r\nimport { ActivityFormValues } from '../../../models/activity'\r\nimport ActivityStore from '../../../app/stores/activityStore'\r\nimport { observer } from 'mobx-react-lite'\r\nimport { RouteComponentProps } from 'react-router-dom'\r\nimport { v4 as uuid } from 'uuid'\r\nimport { Form as FinalForm, Field } from 'react-final-form';\r\nimport TextInput from '../../../app/common/form/TextInput'\r\nimport TextAreaInput from '../../../app/common/form/TextAreaInput'\r\nimport SelectInput from '../../../app/common/form/SelectInput'\r\nimport { category } from '../../../app/common/options/categoryOptions'\r\nimport { DateInput } from '../../../app/common/form/DateInput'\r\nimport { combineDateAndTime } from '../../../app/common/util/util'\r\nimport { combineValidators, composeValidators, hasLengthGreaterThan, isRequired } from 'revalidate'\r\nimport { RootStoreContext } from '../../../app/stores/rootStore'\r\n\r\nconst validate = combineValidators({\r\n    title: isRequired({ message: 'The event title is required' }),\r\n    category: isRequired('Category'),\r\n    description: composeValidators(\r\n        isRequired('Description'),\r\n        hasLengthGreaterThan(4)({ message: 'Description needs to be at least 5 characters' })\r\n    )(),\r\n    city: isRequired('City'),\r\n    venue: isRequired('Venue'),\r\n    date: isRequired('Date'),\r\n    time: isRequired('Time'),\r\n})\r\n\r\ninterface DetailParams {\r\n    id: string;\r\n}\r\n\r\nconst ActivityForm: React.FC<RouteComponentProps<DetailParams>> = ({ match, history }) => {\r\n\r\n    const rootStore = useContext(RootStoreContext);\r\n    const {\r\n        submitting,\r\n        createActivity,\r\n        editActivity,\r\n        loadActivity,\r\n    } = rootStore.activityStore\r\n\r\n    const [activity, setActivity] = useState(new ActivityFormValues());\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    useEffect(() => {\r\n        if (match.params.id) {\r\n            setLoading(true);\r\n            loadActivity(match.params.id)\r\n                .then((activity) => setActivity(new ActivityFormValues(activity)))\r\n                .finally(() => { setLoading(false); });\r\n        }\r\n    }, [\r\n        loadActivity,\r\n        match.params.id,\r\n    ]);\r\n    // Add in the dependencies otherwise this will run all the time. \r\n    // TIP:  adding an empty array will cause it to only run once\r\n\r\n    const handleFinalFormSubmit = (values: any) => {\r\n\r\n        const dateAndTime = combineDateAndTime(values.date, values.time); //151\r\n        const { date, time, ...activity } = values; // Omit date and time from activity\r\n        activity.date = dateAndTime; // Add dateAndTime instead (i.e. dateAndTime replaces date, time)\r\n\r\n        if (!activity.id) {\r\n            let newActivity = {\r\n                ...activity,\r\n                id: uuid()\r\n            }\r\n            createActivity(newActivity);\r\n        } else {\r\n            editActivity(activity);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={10}>\r\n                <Segment clearing>\r\n                    <FinalForm\r\n                        validate={validate}\r\n                        initialValues={activity}\r\n                        onSubmit={handleFinalFormSubmit}\r\n                        render={({ handleSubmit, invalid, pristine }) => (\r\n\r\n                            <Form onSubmit={handleSubmit} loading={loading}>\r\n                                <Field\r\n                                    component={TextInput}\r\n                                    name='title'\r\n                                    placeholder='Title'\r\n                                    value={activity.title}\r\n                                />\r\n                                <Field\r\n                                    component={TextAreaInput}\r\n                                    name='description'\r\n                                    rows={3}\r\n                                    placeholder='Description'\r\n                                    value={activity.description}\r\n                                />\r\n                                <Field\r\n                                    component={SelectInput}\r\n                                    options={category}\r\n                                    name='category'\r\n                                    placeholder='Category'\r\n                                    value={activity.category}\r\n                                />\r\n                                <Form.Group widths='equal'>\r\n                                    <Field\r\n                                        component={DateInput}\r\n                                        name='date'\r\n                                        date={true}\r\n                                        placeholder='Date'\r\n                                        value={activity.date}\r\n                                    />\r\n                                    <Field\r\n                                        component={DateInput}\r\n                                        name='time'\r\n                                        time={true}\r\n                                        placeholder='Time'\r\n                                        value={activity.time}\r\n                                    />\r\n                                </Form.Group>\r\n\r\n                                <Field\r\n                                    component={TextInput}\r\n                                    name='city' placeholder='City'\r\n                                    value={activity.city}\r\n                                />\r\n                                <Field\r\n                                    component={TextInput}\r\n                                    name='venue'\r\n                                    placeholder='Venue'\r\n                                    value={activity.venue}\r\n                                />\r\n                                <Button\r\n                                    disabled={loading || invalid || pristine}\r\n                                    loading={submitting}\r\n                                    floated='right'\r\n                                    positive type='submit'\r\n                                    content='Submit'\r\n                                />\r\n                                <Button\r\n                                    disabled={loading}\r\n                                    floated='right'\r\n                                    type='button'\r\n                                    content='Cancel'\r\n                                    onClick={activity.id\r\n                                        ? () => history.push(`/activities/${activity.id}`)\r\n                                        : () => history.push('/activities')}\r\n                                />\r\n                            </Form>\r\n                        )\r\n                        }\r\n                    />\r\n                </Segment>\r\n            </Grid.Column>\r\n        </Grid >\r\n\r\n    )\r\n}\r\n\r\nexport default observer(ActivityForm);","C:\\source\\Reactivities\\client-app\\src\\app\\api\\agent.ts",["128","129"],"import axios, { AxiosResponse } from 'axios'\r\nimport { toast } from 'react-toastify';\r\nimport { history } from '../..';\r\nimport { IActivity } from '../../models/activity';\r\nimport { IUser, IUserFormValues } from '../../models/user';\r\n\r\naxios.defaults.baseURL = 'https://localhost:5001/api';\r\n\r\naxios.interceptors.response.use(undefined, error => {\r\n\r\n    if (error.message = 'Network Error' && !error.response) {\r\n        toast.error('Network error: Check API');\r\n    }\r\n\r\n    const { status, data, config } = error.response;\r\n\r\n    if (status === 404) {\r\n        history.push('/notfound');\r\n    }\r\n\r\n    if (status === 400 && config.method === 'get' && data.errors.hasOwnProperty('id')) {\r\n        history.push('/notfound');\r\n    }\r\n\r\n    if (status === 500) {\r\n        toast.error('Server error');\r\n    }\r\n\r\n    console.log(error);\r\n    throw error.response;\r\n})\r\n\r\nconst responseBody = (response: AxiosResponse) => response.data;\r\n\r\nconst sleep = (ms: number) => (response: AxiosResponse) =>\r\n    new Promise<AxiosResponse>(resolve => setTimeout(() => resolve(response), ms));\r\n\r\nconst requests = {\r\n    get: (url: string) => axios.get(url).then(sleep(800)).then(responseBody),\r\n    post: (url: string, body: {}) => axios.post(url, body).then(sleep(800)).then(responseBody),\r\n    put: (url: string, body: {}) => axios.put(url, body).then(sleep(800)).then(responseBody),\r\n    del: (url: string) => axios.delete(url).then(sleep(800)).then(responseBody)\r\n}\r\n\r\nconst Activities = {\r\n    //list: () => requests.get('/activities'),\r\n    list: (): Promise<IActivity[]> => requests.get('/activities'),\r\n    details: (id: string) => requests.get(`/activities/${id}`),\r\n    create: (activity: IActivity) => requests.post('/activities', activity),\r\n    update: (activity: IActivity) => requests.put(`/activities/${activity.id}`, activity),\r\n    delete: (id: string) => requests.del(`/activities/${id}`),\r\n};\r\n\r\nconst User = { //464\r\n    current: (): Promise<IUser> => requests.get('/user'),\r\n    login: (user: IUserFormValues): Promise<IUser> => requests.post('/user/login', user),\r\n    register: (user: IUserFormValues): Promise<IUser> => requests.post('/user/rgister', user),\r\n}\r\n\r\nexport default {\r\n    Activities,\r\n    User\r\n};","C:\\source\\Reactivities\\client-app\\src\\app\\layout\\LoadingComponent.tsx",[],"C:\\source\\Reactivities\\client-app\\src\\app\\stores\\activityStore.ts",[],"C:\\source\\Reactivities\\client-app\\src\\features\\home\\HomePage.tsx",[],"C:\\source\\Reactivities\\client-app\\src\\app\\layout\\scrollToTop.tsx",[],"C:\\source\\Reactivities\\client-app\\src\\features\\activities\\dashboard\\ActivityListItem.tsx",[],"C:\\source\\Reactivities\\client-app\\src\\features\\activities\\details\\ActivityDetailesHeader.tsx",[],"C:\\source\\Reactivities\\client-app\\src\\features\\activities\\details\\ActivityDetailsChat.tsx",[],"C:\\source\\Reactivities\\client-app\\src\\features\\activities\\details\\ActivityDetailsInfo.tsx",[],"C:\\source\\Reactivities\\client-app\\src\\features\\activities\\details\\ActivityDetailesSidebar.tsx",[],"C:\\source\\Reactivities\\client-app\\src\\app\\layout\\NotFound.tsx",[],"C:\\source\\Reactivities\\client-app\\src\\app\\common\\form\\SelectInput.tsx",[],"C:\\source\\Reactivities\\client-app\\src\\app\\common\\options\\categoryOptions.tsx",[],"C:\\source\\Reactivities\\client-app\\src\\app\\common\\form\\TextAreaInput.tsx",[],"C:\\source\\Reactivities\\client-app\\src\\app\\common\\form\\TextInput.tsx",[],"C:\\source\\Reactivities\\client-app\\src\\app\\common\\form\\DateInput.tsx",[],"C:\\source\\Reactivities\\client-app\\src\\app\\common\\util\\util.ts",[],"C:\\source\\Reactivities\\client-app\\src\\models\\activity.ts",[],"C:\\source\\Reactivities\\client-app\\src\\app\\stores\\rootStore.ts",[],"C:\\source\\Reactivities\\client-app\\src\\app\\stores\\userStore.ts",[],"C:\\source\\Reactivities\\client-app\\src\\features\\user\\LoginForm.tsx",["130","131"],{"ruleId":"132","replacedBy":"133"},{"ruleId":"134","replacedBy":"135"},{"ruleId":"136","severity":1,"message":"137","line":4,"column":8,"nodeType":"138","messageId":"139","endLine":4,"endColumn":21},{"ruleId":"136","severity":1,"message":"137","line":3,"column":8,"nodeType":"138","messageId":"139","endLine":3,"endColumn":21},{"ruleId":"136","severity":1,"message":"137","line":4,"column":8,"nodeType":"138","messageId":"139","endLine":4,"endColumn":21},{"ruleId":"140","severity":1,"message":"141","line":11,"column":9,"nodeType":"142","messageId":"143","endLine":11,"endColumn":59},{"ruleId":"144","severity":1,"message":"145","line":60,"column":1,"nodeType":"146","endLine":63,"endColumn":3},{"ruleId":"147","severity":1,"message":"148","line":50,"column":43,"nodeType":"149","messageId":"150","endLine":50,"endColumn":45},{"ruleId":"147","severity":1,"message":"148","line":50,"column":68,"nodeType":"149","messageId":"150","endLine":50,"endColumn":70},"no-native-reassign",["151"],"no-negated-in-lhs",["152"],"@typescript-eslint/no-unused-vars","'ActivityStore' is defined but never used.","Identifier","unusedVar","no-cond-assign","Expected a conditional expression and instead saw an assignment.","AssignmentExpression","missing","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","no-mixed-operators","Unexpected mix of '&&' and '||'.","LogicalExpression","unexpectedMixedOperator","no-global-assign","no-unsafe-negation"]