[{"C:\\source\\Reactivities\\client-app\\src\\index.tsx":"1","C:\\source\\Reactivities\\client-app\\src\\reportWebVitals.ts":"2","C:\\source\\Reactivities\\client-app\\src\\app\\layout\\App.tsx":"3","C:\\source\\Reactivities\\client-app\\src\\features\\navbar.tsx":"4","C:\\source\\Reactivities\\client-app\\src\\features\\activities\\dashboard\\ActivityDashboard.tsx":"5","C:\\source\\Reactivities\\client-app\\src\\features\\activities\\dashboard\\ActivityList.tsx":"6","C:\\source\\Reactivities\\client-app\\src\\features\\activities\\details\\ActivityDetails.tsx":"7","C:\\source\\Reactivities\\client-app\\src\\features\\activities\\form\\ActivityForm.tsx":"8","C:\\source\\Reactivities\\client-app\\src\\app\\api\\agent.ts":"9","C:\\source\\Reactivities\\client-app\\src\\app\\layout\\LoadingComponent.tsx":"10","C:\\source\\Reactivities\\client-app\\src\\app\\stores\\activityStore.ts":"11","C:\\source\\Reactivities\\client-app\\src\\features\\home\\HomePage.tsx":"12"},{"size":617,"mtime":1611225524746,"results":"13","hashOfConfig":"14"},{"size":425,"mtime":499162500000,"results":"15","hashOfConfig":"14"},{"size":1447,"mtime":1611266740713,"results":"16","hashOfConfig":"14"},{"size":1081,"mtime":1611227680709,"results":"17","hashOfConfig":"14"},{"size":759,"mtime":1611263329347,"results":"18","hashOfConfig":"14"},{"size":2170,"mtime":1611227297403,"results":"19","hashOfConfig":"14"},{"size":2233,"mtime":1611264615270,"results":"20","hashOfConfig":"14"},{"size":3163,"mtime":1611266348469,"results":"21","hashOfConfig":"14"},{"size":1221,"mtime":1609974189759,"results":"22","hashOfConfig":"14"},{"size":344,"mtime":1608422584441,"results":"23","hashOfConfig":"14"},{"size":5326,"mtime":1611266166412,"results":"24","hashOfConfig":"14"},{"size":236,"mtime":1611226264021,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"bpf4sv",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"28"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"28"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"C:\\source\\Reactivities\\client-app\\src\\index.tsx",[],["53","54"],"C:\\source\\Reactivities\\client-app\\src\\reportWebVitals.ts",[],"C:\\source\\Reactivities\\client-app\\src\\app\\layout\\App.tsx",[],"C:\\source\\Reactivities\\client-app\\src\\features\\navbar.tsx",[],"C:\\source\\Reactivities\\client-app\\src\\features\\activities\\dashboard\\ActivityDashboard.tsx",["55","56","57","58"],"import { observer } from 'mobx-react-lite'\r\nimport React, { useContext } from 'react'\r\nimport { Grid } from 'semantic-ui-react'\r\nimport ActivityDetails from '../details/ActivityDetails'\r\nimport ActivityForm from '../form/ActivityForm'\r\nimport ActivityList from './ActivityList'\r\nimport ActivityStore from '../../../app/stores/activityStore'\r\n\r\nconst ActivityDashboard = () => {\r\n\r\n    const { editMode, activity } = useContext(ActivityStore);\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={10}>\r\n                <ActivityList />\r\n            </Grid.Column>\r\n            <Grid.Column width={6}>\r\n                <h2>Activity filters</h2>\r\n            </Grid.Column>\r\n        </Grid >\r\n    );\r\n};\r\n\r\nexport default observer(ActivityDashboard);","C:\\source\\Reactivities\\client-app\\src\\features\\activities\\dashboard\\ActivityList.tsx",[],"C:\\source\\Reactivities\\client-app\\src\\features\\activities\\details\\ActivityDetails.tsx",["59","60"],"import React, { useContext, useEffect } from 'react'\r\nimport { Button, Card, Image } from 'semantic-ui-react'\r\nimport ActivityStore from '../../../app/stores/activityStore'\r\nimport { observer } from 'mobx-react-lite'\r\nimport { Link, RouteComponentProps } from 'react-router-dom'\r\nimport { LoadingComponent } from '../../../app/layout/LoadingComponent'\r\n\r\n\r\ninterface DatailParams {\r\n    id: string\r\n}\r\n\r\nconst ActivityDetails: React.FC<RouteComponentProps<DatailParams>> = ({ match, history }) => {\r\n\r\n    const { activity, openEditForm, cancelSelectedActivity, loadActivity, loadingInitial } = useContext(ActivityStore);\r\n\r\n    useEffect(() => {\r\n        loadActivity(match.params.id)\r\n    }, [loadActivity]);\r\n    // If you leave this off -',[loadActivity]', then it will run every time the component re-renders. Which is not what I want. I only want it to run once when the componentn mounts.\r\n\r\n    if (loadingInitial || !activity) return <LoadingComponent content='Loading activity...' />\r\n\r\n    return (\r\n        <Card fluid>\r\n            <Image src={`/assets/categoryImages/${activity!.category}.jpg`} wrapped ui={false} />\r\n            <Card.Content>\r\n                <Card.Header>{activity!.title}</Card.Header>\r\n                <Card.Meta>\r\n                    <span className='date'>{activity!.date}</span>\r\n                </Card.Meta>\r\n                <Card.Description>\r\n                    {activity!.description}\r\n                </Card.Description>\r\n            </Card.Content>\r\n            <Card.Content extra>\r\n                <Button.Group widths={2}>\r\n                    <Button\r\n                        as={Link} to={`/manage/${activity.id}`}\r\n                        basic\r\n                        color='blue'\r\n                        content='Edit'\r\n                        onClick={() => openEditForm(activity!.id)}\r\n                    />\r\n                    <Button\r\n                        basic\r\n                        color='grey'\r\n                        content='Cancel'\r\n                        onClick={() => history.push('/activities')}\r\n                    />\r\n                </Button.Group>\r\n            </Card.Content>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default observer(ActivityDetails);","C:\\source\\Reactivities\\client-app\\src\\features\\activities\\form\\ActivityForm.tsx",[],"C:\\source\\Reactivities\\client-app\\src\\app\\api\\agent.ts",[],"C:\\source\\Reactivities\\client-app\\src\\app\\layout\\LoadingComponent.tsx",[],"C:\\source\\Reactivities\\client-app\\src\\app\\stores\\activityStore.ts",[],"C:\\source\\Reactivities\\client-app\\src\\features\\home\\HomePage.tsx",[],{"ruleId":"61","replacedBy":"62"},{"ruleId":"63","replacedBy":"64"},{"ruleId":"65","severity":1,"message":"66","line":4,"column":8,"nodeType":"67","messageId":"68","endLine":4,"endColumn":23},{"ruleId":"65","severity":1,"message":"69","line":5,"column":8,"nodeType":"67","messageId":"68","endLine":5,"endColumn":20},{"ruleId":"65","severity":1,"message":"70","line":11,"column":13,"nodeType":"67","messageId":"68","endLine":11,"endColumn":21},{"ruleId":"65","severity":1,"message":"71","line":11,"column":23,"nodeType":"67","messageId":"68","endLine":11,"endColumn":31},{"ruleId":"65","severity":1,"message":"72","line":15,"column":37,"nodeType":"67","messageId":"68","endLine":15,"endColumn":59},{"ruleId":"73","severity":1,"message":"74","line":19,"column":8,"nodeType":"75","endLine":19,"endColumn":22,"suggestions":"76"},"no-native-reassign",["77"],"no-negated-in-lhs",["78"],"@typescript-eslint/no-unused-vars","'ActivityDetails' is defined but never used.","Identifier","unusedVar","'ActivityForm' is defined but never used.","'editMode' is assigned a value but never used.","'activity' is assigned a value but never used.","'cancelSelectedActivity' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'match.params.id'. Either include it or remove the dependency array.","ArrayExpression",["79"],"no-global-assign","no-unsafe-negation",{"desc":"80","fix":"81"},"Update the dependencies array to be: [loadActivity, match.params.id]",{"range":"82","text":"83"},[694,708],"[loadActivity, match.params.id]"]